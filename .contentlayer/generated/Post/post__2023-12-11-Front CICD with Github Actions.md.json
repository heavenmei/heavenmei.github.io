{
  "title": "前端自动化CI/CD：Github Action部署项目到服务器",
  "url": "/2023-12-11-CICD",
  "date": "2023-12-11T00:00:00.000Z",
  "body": {
    "raw": "> **What‘s Github Action？**  \n> [GitHub Actions](https://github.com/features/actions) 是 GitHub 的持续集成服务(CI/CD)。\n> 想要了解的朋友移步 [GitHub Actions 入门教程](https://link.juejin.cn/?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2019%2F09%2Fgetting-started-with-github-actions.html \"https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html\")\n\n\n### 编写workflow\n创建`.github/workflows` 文件夹，创建`demo.yml`文件\n\n主要流程：\n1. 拉取main分支的最新代码\n2. 设置node版本号\n3. 缓存依赖\n4. 安装依赖\n5. 打包\n6. 上传资源到指定路径\n\n```yaml\nname: Node CI\n\n# 触发workflow的条件\non:\n\tpush:\n\t\tbranches: [ \"main\" ]\n\tpull_request:\n\t\tbranches: [ \"main\" ]\n\n# jobs表示执行的一项或多项任务\njobs:\n\t# 任务的job_id，具体名称自定义，这里build代表打包\n\tbuild:\n\t\truns-on: ubuntu-latest\n\t\tstrategy:\n\t\t\tmatrix:\n\t\t\t\tnode-version: [18.18.2]\n\n\t\tsteps:\n\t\t\t  # 拉取main分支最新代码\n\t\t\t  uses: actions/checkout@main\n\t\t\t  \n\t\t\t  # 确定node版本\n\t\t\t- name: Use Node.js ${{ matrix.node-version }}\n\t\t\t  uses: actions/setup-node@v3\n\t\t\t  with:\n\t\t\t\tnode-version: ${{ matrix.node-version }}\n\t\t\n\t\t\t # 缓存依赖\n\t\t\t- name: Cache nodemodules\n\t\t\t  uses: actions/cache@v1\n\t\t\t  env:\n\t\t\t\tcache-name: cache-node-modules\n\t\t\t  with:\n\t\t\t    # 需要缓存的文件的路径\n\t\t\t\tpath: ./node_modules \n\t\t\t\t# 对缓存的文件指定的唯一标识\n\t\t\t\tkey: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package.json') }} \n\t\t\t\t# 用于没有再找目标key的缓存的backup选项\n\t\t\t\trestore-keys: |\n\t\t\t\t\t${{ runner.os }}-build-${{ env.cache-name }}-\n\t\t\t\t\t${{ runner.os }}-build-\n\t\t\t\t\t${{ runner.os }}-\n\t\t\n\t\t\t# 装依赖\n\t\t\t- name: Install\n\t\t\t  run: |\n\t\t\t\tnpm install -g yarn@1.22.19\n\t\t\t\tyarn install\n```\n\n\n### 打包\n本地开发时会把所需要的环境编写在.env 文件内，并且不会上传到github上以保证仓库隐私性。因此，在打包时若有相关生产环境变量，可以直接定义在 secret中\n\n![Pasted image 20231211150807.png](https://raw.githubusercontent.com/heavenmei/heavenmei.github.io/master/images/202312111641617.png)\n\n\n在脚本中引用\n```yaml\n\nenv:\n\tVITE_SERVER_NAME: ${{ secrets.VITE_SERVER_NAME }} # 服务器域名\n\tcache-name: note\n\njobs:\n\tbuild:\n\t\tsteps:\n\t\t\t...\n\t\t\t# 打包\n\t\t\t- name: Build\n\t\t\trun: |\n\t\t\t\techo \"VITE_SERVER_NAME = ${{ env.VITE_SERVER_NAME }}\" > .env\n\t\t\t\tyarn build\n\n```\n\n### 部署\n部署思想：首先利用ssh 将打包好的资源上传到服务器上，服务器上利用pm2 管理node进程，nginx反向代理端口，脚本重启pm2该项目进程。\n\n1. 在服务器配置nginx指向前端运行的端口\n```shell\nserver {\n\tlisten 8889;  # 对外接口\n\tserver_name api.msg.com;\n\t\n\tlocation / {\n\t\tproxy_pass http://localhost:3008; # 服务器本地运行前端端口\n\t\tadd_header backendIP $upstream_addr;\n\t\tadd_header backendCode $upstream_status;\n\t}\n}\n```\n2. 服务器创建秘钥对\n将本机与服务器创建密钥对，并把本地公钥加入`.ssh/authorized_keys`中，同时保存到github secrets。\n```yaml\n\nenv:\n\tSERVER_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }} # 服务器私钥\n\tSERVER_HOST: ${{ secrets.SERVER_HOST }} # 服务器IP地址\n\tUSER_NAME: ${{ secrets.USER_NAME }} # 服务器用户名\n\njobs:\n\tbuild:\n\t\tsteps:\n\t\t\t...\n\t\t\t# 上传打包资源\n\t\t\t- name: Deploy\n\t\t\tuses: easingthemes/ssh-deploy@v3\n\t\t\tenv:\n\t\t\t\tSSH_PRIVATE_KEY: ${{ env.SERVER_PRIVATE_KEY }}\n\t\t\t\tARGS: '-avz --delete'\n\t\t\t\tSOURCE: '.output/' # \n\t\t\t\t\n\t\t\t\tREMOTE_HOST: ${{ env.SERVER_HOST }}\n\t\t\t\tREMOTE_USER: ${{ env.USER_NAME }}\n\t\t\t\tTARGET: /root/i-lion-front/.output # 服务器目标路径\n```\n\n3. 重新部署脚本\n首先在服务器中安装[pm2](https://pm2.keymetrics.io/)并启动运行该项目，服务器中创建重启脚本`run_node.sh`\n```shell\npm2 reload xxx/ecosystem.config.cjs\n```\naction 执行该脚本\n```yaml\n# 重新部署\n\n- name: Reload pm2\n  uses: appleboy/ssh-action@master\n  with:\n\thost: ${{ env.SERVER_HOST }}\n\tusername: ${{ env.USER_NAME }}\n\tkey: ${{ env.SERVER_PRIVATE_KEY }}\n\tscript: |\n\t\t# 在服务器中执行的命令\n\t\tzsh xxxrun_node.sh\n```\n\n\n### 执行\n GitHub Actions 绑定`.github/workflows/demo.yml` ，执行结果如下：\n ![](https://raw.githubusercontent.com/heavenmei/heavenmei.github.io/master/images/202312111642891.png)\n### 完整代码\n\n```yaml\nname: Node CI\n\n# 触发workflow的条件\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\nenv:\n    SERVER_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }} # 服务器私钥\n    SERVER_HOST: ${{ secrets.SERVER_HOST }} # 服务器IP地址\n    USER_NAME: ${{ secrets.USER_NAME }} # 服务器用户名\n    VITE_SERVER_NAME: ${{ secrets.VITE_SERVER_NAME }} \n    cache-name: note\n    \njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [18.18.2]\n        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\n    steps:\n    - uses: actions/checkout@main\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n     #缓存依赖\n    - name: Cache nodemodules\n      uses: actions/cache@v1\n      env:\n          cache-name: cache-node-modules\n      with:\n          # 需要缓存的文件的路径\n          path: ./node_modules \n          # 对缓存的文件指定的唯一标识\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package.json') }} \n          # 用于没有再找目标key的缓存的backup选项\n          restore-keys: |\n              ${{ runner.os }}-build-${{ env.cache-name }}-\n              ${{ runner.os }}-build-\n              ${{ runner.os }}-\n    # 装依赖\n    - name: Install\n      run: |\n          npm install -g yarn@1.22.19\n          yarn install\n    # 打包\n    - name: Build\n      run: |\n          echo \"VITE_SERVER_NAME = ${{ env.VITE_SERVER_NAME }}\" > .env\n          yarn build\n    # 上传打包资源\n    - name: Deploy\n      uses: easingthemes/ssh-deploy@v3\n      env:\n          SSH_PRIVATE_KEY: ${{ env.SERVER_PRIVATE_KEY }}\n          ARGS: '-avz --delete'\n          SOURCE: '.output/'\n          REMOTE_HOST: ${{ env.SERVER_HOST }}\n          REMOTE_USER: ${{ env.USER_NAME }}\n          TARGET: /root/i-lion-front/.output # 服务器目标路径\n    # 重新部署\n    - name: Reload pm2\n      uses: appleboy/ssh-action@master\n      with:\n        host: ${{ env.SERVER_HOST }}\n        username: ${{ env.USER_NAME }}\n        key: ${{ env.SERVER_PRIVATE_KEY }}\n        script: |\n          source /www/server/nvm/nvm.sh\n          nvm use 18.18.2\n          zsh /root/i-lion-front/run_node.sh\n\n```",
    "html": "<blockquote>\n<p><strong>What‘s Github Action？</strong><br>\n<a href=\"https://github.com/features/actions\">GitHub Actions</a> 是 GitHub 的持续集成服务(CI/CD)。\n想要了解的朋友移步 <a href=\"https://link.juejin.cn/?target=https%3A%2F%2Fwww.ruanyifeng.com%2Fblog%2F2019%2F09%2Fgetting-started-with-github-actions.html\" title=\"https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html\">GitHub Actions 入门教程</a></p>\n</blockquote>\n<h3>编写workflow</h3>\n<p>创建<code>.github/workflows</code> 文件夹，创建<code>demo.yml</code>文件</p>\n<p>主要流程：</p>\n<ol>\n<li>拉取main分支的最新代码</li>\n<li>设置node版本号</li>\n<li>缓存依赖</li>\n<li>安装依赖</li>\n<li>打包</li>\n<li>上传资源到指定路径</li>\n</ol>\n<pre><code class=\"language-yaml\">name: Node CI\n\n# 触发workflow的条件\non:\n\tpush:\n\t\tbranches: [ \"main\" ]\n\tpull_request:\n\t\tbranches: [ \"main\" ]\n\n# jobs表示执行的一项或多项任务\njobs:\n\t# 任务的job_id，具体名称自定义，这里build代表打包\n\tbuild:\n\t\truns-on: ubuntu-latest\n\t\tstrategy:\n\t\t\tmatrix:\n\t\t\t\tnode-version: [18.18.2]\n\n\t\tsteps:\n\t\t\t  # 拉取main分支最新代码\n\t\t\t  uses: actions/checkout@main\n\t\t\t  \n\t\t\t  # 确定node版本\n\t\t\t- name: Use Node.js ${{ matrix.node-version }}\n\t\t\t  uses: actions/setup-node@v3\n\t\t\t  with:\n\t\t\t\tnode-version: ${{ matrix.node-version }}\n\t\t\n\t\t\t # 缓存依赖\n\t\t\t- name: Cache nodemodules\n\t\t\t  uses: actions/cache@v1\n\t\t\t  env:\n\t\t\t\tcache-name: cache-node-modules\n\t\t\t  with:\n\t\t\t    # 需要缓存的文件的路径\n\t\t\t\tpath: ./node_modules \n\t\t\t\t# 对缓存的文件指定的唯一标识\n\t\t\t\tkey: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package.json') }} \n\t\t\t\t# 用于没有再找目标key的缓存的backup选项\n\t\t\t\trestore-keys: |\n\t\t\t\t\t${{ runner.os }}-build-${{ env.cache-name }}-\n\t\t\t\t\t${{ runner.os }}-build-\n\t\t\t\t\t${{ runner.os }}-\n\t\t\n\t\t\t# 装依赖\n\t\t\t- name: Install\n\t\t\t  run: |\n\t\t\t\tnpm install -g yarn@1.22.19\n\t\t\t\tyarn install\n</code></pre>\n<h3>打包</h3>\n<p>本地开发时会把所需要的环境编写在.env 文件内，并且不会上传到github上以保证仓库隐私性。因此，在打包时若有相关生产环境变量，可以直接定义在 secret中</p>\n<p><img src=\"https://raw.githubusercontent.com/heavenmei/heavenmei.github.io/master/images/202312111641617.png\" alt=\"Pasted image 20231211150807.png\"></p>\n<p>在脚本中引用</p>\n<pre><code class=\"language-yaml\">\nenv:\n\tVITE_SERVER_NAME: ${{ secrets.VITE_SERVER_NAME }} # 服务器域名\n\tcache-name: note\n\njobs:\n\tbuild:\n\t\tsteps:\n\t\t\t...\n\t\t\t# 打包\n\t\t\t- name: Build\n\t\t\trun: |\n\t\t\t\techo \"VITE_SERVER_NAME = ${{ env.VITE_SERVER_NAME }}\" > .env\n\t\t\t\tyarn build\n\n</code></pre>\n<h3>部署</h3>\n<p>部署思想：首先利用ssh 将打包好的资源上传到服务器上，服务器上利用pm2 管理node进程，nginx反向代理端口，脚本重启pm2该项目进程。</p>\n<ol>\n<li>在服务器配置nginx指向前端运行的端口</li>\n</ol>\n<pre><code class=\"language-shell\">server {\n\tlisten 8889;  # 对外接口\n\tserver_name api.msg.com;\n\t\n\tlocation / {\n\t\tproxy_pass http://localhost:3008; # 服务器本地运行前端端口\n\t\tadd_header backendIP $upstream_addr;\n\t\tadd_header backendCode $upstream_status;\n\t}\n}\n</code></pre>\n<ol start=\"2\">\n<li>服务器创建秘钥对\n将本机与服务器创建密钥对，并把本地公钥加入<code>.ssh/authorized_keys</code>中，同时保存到github secrets。</li>\n</ol>\n<pre><code class=\"language-yaml\">\nenv:\n\tSERVER_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }} # 服务器私钥\n\tSERVER_HOST: ${{ secrets.SERVER_HOST }} # 服务器IP地址\n\tUSER_NAME: ${{ secrets.USER_NAME }} # 服务器用户名\n\njobs:\n\tbuild:\n\t\tsteps:\n\t\t\t...\n\t\t\t# 上传打包资源\n\t\t\t- name: Deploy\n\t\t\tuses: easingthemes/ssh-deploy@v3\n\t\t\tenv:\n\t\t\t\tSSH_PRIVATE_KEY: ${{ env.SERVER_PRIVATE_KEY }}\n\t\t\t\tARGS: '-avz --delete'\n\t\t\t\tSOURCE: '.output/' # \n\t\t\t\t\n\t\t\t\tREMOTE_HOST: ${{ env.SERVER_HOST }}\n\t\t\t\tREMOTE_USER: ${{ env.USER_NAME }}\n\t\t\t\tTARGET: /root/i-lion-front/.output # 服务器目标路径\n</code></pre>\n<ol start=\"3\">\n<li>重新部署脚本\n首先在服务器中安装<a href=\"https://pm2.keymetrics.io/\">pm2</a>并启动运行该项目，服务器中创建重启脚本<code>run_node.sh</code></li>\n</ol>\n<pre><code class=\"language-shell\">pm2 reload xxx/ecosystem.config.cjs\n</code></pre>\n<p>action 执行该脚本</p>\n<pre><code class=\"language-yaml\"># 重新部署\n\n- name: Reload pm2\n  uses: appleboy/ssh-action@master\n  with:\n\thost: ${{ env.SERVER_HOST }}\n\tusername: ${{ env.USER_NAME }}\n\tkey: ${{ env.SERVER_PRIVATE_KEY }}\n\tscript: |\n\t\t# 在服务器中执行的命令\n\t\tzsh xxxrun_node.sh\n</code></pre>\n<h3>执行</h3>\n<p>GitHub Actions 绑定<code>.github/workflows/demo.yml</code> ，执行结果如下：\n<img src=\"https://raw.githubusercontent.com/heavenmei/heavenmei.github.io/master/images/202312111642891.png\" alt=\"\"></p>\n<h3>完整代码</h3>\n<pre><code class=\"language-yaml\">name: Node CI\n\n# 触发workflow的条件\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n\nenv:\n    SERVER_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }} # 服务器私钥\n    SERVER_HOST: ${{ secrets.SERVER_HOST }} # 服务器IP地址\n    USER_NAME: ${{ secrets.USER_NAME }} # 服务器用户名\n    VITE_SERVER_NAME: ${{ secrets.VITE_SERVER_NAME }} \n    cache-name: note\n    \njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [18.18.2]\n        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/\n\n    steps:\n    - uses: actions/checkout@main\n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${{ matrix.node-version }}\n     #缓存依赖\n    - name: Cache nodemodules\n      uses: actions/cache@v1\n      env:\n          cache-name: cache-node-modules\n      with:\n          # 需要缓存的文件的路径\n          path: ./node_modules \n          # 对缓存的文件指定的唯一标识\n          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./package.json') }} \n          # 用于没有再找目标key的缓存的backup选项\n          restore-keys: |\n              ${{ runner.os }}-build-${{ env.cache-name }}-\n              ${{ runner.os }}-build-\n              ${{ runner.os }}-\n    # 装依赖\n    - name: Install\n      run: |\n          npm install -g yarn@1.22.19\n          yarn install\n    # 打包\n    - name: Build\n      run: |\n          echo \"VITE_SERVER_NAME = ${{ env.VITE_SERVER_NAME }}\" > .env\n          yarn build\n    # 上传打包资源\n    - name: Deploy\n      uses: easingthemes/ssh-deploy@v3\n      env:\n          SSH_PRIVATE_KEY: ${{ env.SERVER_PRIVATE_KEY }}\n          ARGS: '-avz --delete'\n          SOURCE: '.output/'\n          REMOTE_HOST: ${{ env.SERVER_HOST }}\n          REMOTE_USER: ${{ env.USER_NAME }}\n          TARGET: /root/i-lion-front/.output # 服务器目标路径\n    # 重新部署\n    - name: Reload pm2\n      uses: appleboy/ssh-action@master\n      with:\n        host: ${{ env.SERVER_HOST }}\n        username: ${{ env.USER_NAME }}\n        key: ${{ env.SERVER_PRIVATE_KEY }}\n        script: |\n          source /www/server/nvm/nvm.sh\n          nvm use 18.18.2\n          zsh /root/i-lion-front/run_node.sh\n\n</code></pre>"
  },
  "_id": "post/2023-12-11-Front CICD with Github Actions.md",
  "_raw": {
    "sourceFilePath": "post/2023-12-11-Front CICD with Github Actions.md",
    "sourceFileName": "2023-12-11-Front CICD with Github Actions.md",
    "sourceFileDir": "post",
    "contentType": "markdown",
    "flattenedPath": "post/2023-12-11-Front CICD with Github Actions"
  },
  "type": "Post",
  "id": ""
}
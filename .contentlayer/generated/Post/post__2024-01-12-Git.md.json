{
  "title": "git详细使用",
  "url": "/2024-01-12-git",
  "date": "2024-01-12T00:00:00.000Z",
  "body": {
    "raw": "> 基础的git知识不重复了，记录一些在实践应用中会需要的命令要点\n\n![](https://raw.githubusercontent.com/heavenmei/heavenmei.github.io/master/images/202401121443587.png)\n\n## 基本操作\n**git add** \n\n**git commit**\n- `--amend`： 修改git提交记录用法,本质上就是生成了新的commit，替代了上一次commit的位置\n- \n\n**git push**\n\n**git status**\n\n**git fetch**\n\n**git pull**\ngit pull = git fetch + git merge\ngit pull --rebase = git fetch + git rebase\n\n- `-r`/`--rebase`: rebase\n\n**git branch**\n列出，创建或删除分支\n- 无参数： 没有参数时，**git branch** 会列出你在本地的分支。\n- `git branch <branch_name>`： 创建分支\n- `-d <branch_name>`： 删除分支\n\n**git checkout**\n- `git checkout <branch_name>` 切换分支\n- `-b <new_branch>`: 创建一个名为<new_branch>的新分支并在<start_point>处启动它\n\n**git remote**\n\n\n**git stash:**\n将变化储存的工作目录中\n`git stash pop`： 恢复缓存\n\n\n**git log**\n命令显示从最近到最远的提交日志\n## 合并\n#### git merge\n**两种用途：**\n1. 用于git-pull中，来整合另一代码仓库中的变化（即：git pull = git fetch + git merge）\n2. 用于从一个分支到另一个分支的合并\n\n**合并策略**：Git merge有两种主要的合并策略：fast-forward和recursive。\n**fast-forward**：默认，当前分支合并到另一分支时，如果没有分歧解决，就会直接移动文件指针。\n例如：假设存在以下历史记录，创建topic分支后主分支没有任何提交，并且当前分支是\"master\"\n```shell\n          A---B---C topic\n         /\n    D---E master\n```\n然后 `git merge topic`将会把ABC节点与E节点连接，直接移动HEAD指针\n```shell\n          A---B---C topic\n         /\n    D---E---A---B---C master\n```\n\n\n**recursive**：Git会创建一个新的提交来表示合并结果，这个提交会包含两个分支的所有变更内容。\n例如：假设存在以下历史记录，并且当前分支是\"master\"：\n```shell\n          A---B---C topic\n         /\n    D---E---F---G master\n```\n\n然后 `git merge topic`将会把ABC节点与G节点合并，并且将结果记录在新的提交H中。C节点和G节点都是H节点的父节点。\n\n```shell\n          A---B---C topic\n         /         \\\n    D---E---F---G---H master\n```\n\n\n\n**子命令**\n- `--abort`：抛弃当前合并冲突的处理过程并尝试重建合并前的状态。\n- `--continue`：由于冲突停止后，您可以通过运行来结束合并\n- `--ff`：当合并策略为fast-forward时，只更新分支指针，而不创建合并提交。这是默认行为。\n- `--no-ff`：即使合并策略为fast-forward，也可以创建合并提交。这是合并tag时的默认行为。\n- `--squash`：将合并结果压缩为一个提交，并且不会保留源分支的提交历史。（与`--no-ff`冲突）\n\n**参数**\n- `-m <message>`：指定新的合并提交的提交信息。\n\n\n#### git rebase\n变基，改变基底\n例如：假设存在以下历史记录，并且当前分支是\"topic\"：\n```text\n          C---D topic\n         /\n    A---B---M master\n```\n\n此时我们在topic分支上，执行rebase命令，相当于是想要把master分支合并到topic分支（这一步的场景就可以类比为我们在自己的分支 topic 上开发了一段时间了，准备从主干master上拉一下最新改动。模拟了`git pull --rebase`的情形）\n```shell\n# 这两条命令等价于git rebase master topic\ngit checkout topic\ngit rebase master\n```\n此时历史记录变成:**注意这里的接法，实际是会依次拿M和C、D内容分别比较，处理冲突后生成新的C’和D’，然后删除原本的CD提交**，相当于topic分支的基底由原来的B变成了M（主分支最新的提交）\n```text\n\t          C‘---D’ topic\n\t         /\n    A---B---M master\n```\n\n注意，如果master上在B以后没有新提交，那么就还是用原来的B作为基，rebase操作相当于无效，此时和git merge就基本没区别了，**差异只在于git merge会多一条记录Merge操作的提交记录**\n\n> 上面的例子可抽象为如下实际工作场景：\n> 远程库上有一个master分支目前开发到B了，张三从B拉了代码到本地的 topic 分支进行开发，目前提交了两次，开发到D了；李四也从B拉到本地的master分支，他提交到了M，然后合到远程库的master上了。此时张三想从远程库master拉下最新代码，于是他在feature分支上执行了git pull origin master:topic --rebase（注意要加–rebase参数），即把远程库master分支给rebase下来，\n> 由于李四更早开发完，此时远程master上是李四的最新内容，rebase后再看张三的历史提交记录，就相当于是张三是基于李四的最新提交M进行的开发了。（但实际上张三更早拉代码下来，李四拉的晚但提交早）\n\n\n## 回滚\n#### git reflog\n查看命令历史，以便确定要回到未来的哪个版本\n\n#### git reset\n将当前 HEAD 重置为指定状态\n```shell\n     git add . ------------> git commit -m 说明 -------------> git push\n   (添加到暂存区)              （提交到本地仓库）             （推送到远程仓库）\n```\n**子命令**\n- `--soft`:该命令表示撤销代码到暂存区之后，`commit`之前，代码在本地不会改变。\n- `--mixed`:该命令表示撤销代码到暂存区和`commit`之前，代码在本地不会改变。\n- `--hard`:该命令表示回退代码到某个版本下，代码在本地会改变到指定版本下，谨慎操作。\n\n\n#### git revert\n恢复一些现有的提交\n\n**子命令**\n- `--abort`： 取消操作并返回到预序列状态。\n\n**参数**\n- `-n`: --no-commit,该命令会自动创建一些提交日志消息，提交哪些提交已恢复。此标志应用必要的更改以将命名的提交恢复到您的工作树和索引，但不进行提交。\n- \n\n\n#### reset vs revert\nreset和revert都可以用来回滚代码。但他们是有区别的：\n- reset是用来\"回退\"版本，删除原本的commit记录\n- revert是用来\"还原\"某次或者某几次提交。生成新的一条commit记录\n\n例如，在master分支，有以下提交历史:\n\n```text\n42eae13 (HEAD -> master) 第四次修改\n97ea0f9 第三次修改\ne50b7c2 第二次修改\n3a52650 第一次修改\n```\n\n执行 `git reset --hard 97ea0f9`,这个时候，git的提交历史变为:\n\n```text\n97ea0f9 (HEAD -> master) 第三次修改\ne50b7c2 第二次修改\n3a52650 第一次修改\n```\n\n可以看到master当前指向97ea0f9这个版本，我们回到了第三次修改。\n但是如果执行 `git revert -n 97ea0f9`, 然后重新commit `git commit -m \"恢复第三次修改\"`,\n```text\n33b8b30 (HEAD -> master) Revert \"恢复第三次修改\"\n42eae13 第四次修改\n97ea0f9 第三次修改\ne50b7c2 第二次修改\n3a52650 第一次修改\n```\nGit把第三次修改从提交中剔除(还原)了，还保留了第四次修改，并且产生了新的commit_id。\n\n\n\n## 实际应用\n[一个成功的Git分支模型](https://www.jianshu.com/p/b357df6794e3)\n### git如何把master合并到自己分支\n1. 切换到主分支 `git chekout master`\n2. pull到本地 `git pull`\n3. 切换到自己的分支 `git checkout xxx`\n4. 把主分支merge到自己的分支 `git merge master`\n5. 最后push，自己分支就与主分支拉齐了\n\n### 如何解决冲突\n看到冲突后，你可以做两件事：\n- 决定不合并。`git merge --abort`\n- 解决冲突。重新add/commit 或者`git merge --continue`密封交易。continue在调用之前检查是否存在正在进行的（中断的）合并`git commit`。然后在push\n\n###  Git Clone 速度太慢的问题\n1. https://whatismyipaddress.com/hostname-ip 到这个网站查找git IP\n2. 或者`nslookup` 进行域名解析， git 相关地址的 `IP Address`，配置到 hosts 中\n```shell\nnslookup github.com\nnslookup github.global.ssl.fastly.net\n```\n3. `ping github.com`成功\n4. 修改 hosts 文件 `sudo vim /etc/host` , 在hosts最后追加\n```shell\n180.168.255.118 github.global.ssl.fastly.net\n180.168.255.118 github.com\n```\n\n\n### .gitignore 不生效\n原因是 .gitignore 只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。  \n那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交。\n```shell\ngit rm -r --cached .\n\ngit add .\n\ngit commit -m 'update .gitignore'\n```\n\n\n###  git Recv failure: Connection was reset\n移除旧的origin ：`git remote remove origin`  \n再重新建立新的origin ： `git remote add origin xxx`\n重新push就可以了",
    "html": "<blockquote>\n<p>基础的git知识不重复了，记录一些在实践应用中会需要的命令要点</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/heavenmei/heavenmei.github.io/master/images/202401121443587.png\" alt=\"\"></p>\n<h2>基本操作</h2>\n<p><strong>git add</strong></p>\n<p><strong>git commit</strong></p>\n<ul>\n<li><code>--amend</code>： 修改git提交记录用法,本质上就是生成了新的commit，替代了上一次commit的位置</li>\n<li></li>\n</ul>\n<p><strong>git push</strong></p>\n<p><strong>git status</strong></p>\n<p><strong>git fetch</strong></p>\n<p><strong>git pull</strong>\ngit pull = git fetch + git merge\ngit pull --rebase = git fetch + git rebase</p>\n<ul>\n<li><code>-r</code>/<code>--rebase</code>: rebase</li>\n</ul>\n<p><strong>git branch</strong>\n列出，创建或删除分支</p>\n<ul>\n<li>无参数： 没有参数时，<strong>git branch</strong> 会列出你在本地的分支。</li>\n<li><code>git branch &#x3C;branch_name></code>： 创建分支</li>\n<li><code>-d &#x3C;branch_name></code>： 删除分支</li>\n</ul>\n<p><strong>git checkout</strong></p>\n<ul>\n<li><code>git checkout &#x3C;branch_name></code> 切换分支</li>\n<li><code>-b &#x3C;new_branch></code>: 创建一个名为&#x3C;new_branch>的新分支并在&#x3C;start_point>处启动它</li>\n</ul>\n<p><strong>git remote</strong></p>\n<p><strong>git stash:</strong>\n将变化储存的工作目录中\n<code>git stash pop</code>： 恢复缓存</p>\n<p><strong>git log</strong>\n命令显示从最近到最远的提交日志</p>\n<h2>合并</h2>\n<h4>git merge</h4>\n<p><strong>两种用途：</strong></p>\n<ol>\n<li>用于git-pull中，来整合另一代码仓库中的变化（即：git pull = git fetch + git merge）</li>\n<li>用于从一个分支到另一个分支的合并</li>\n</ol>\n<p><strong>合并策略</strong>：Git merge有两种主要的合并策略：fast-forward和recursive。\n<strong>fast-forward</strong>：默认，当前分支合并到另一分支时，如果没有分歧解决，就会直接移动文件指针。\n例如：假设存在以下历史记录，创建topic分支后主分支没有任何提交，并且当前分支是\"master\"</p>\n<pre><code class=\"language-shell\">          A---B---C topic\n         /\n    D---E master\n</code></pre>\n<p>然后 <code>git merge topic</code>将会把ABC节点与E节点连接，直接移动HEAD指针</p>\n<pre><code class=\"language-shell\">          A---B---C topic\n         /\n    D---E---A---B---C master\n</code></pre>\n<p><strong>recursive</strong>：Git会创建一个新的提交来表示合并结果，这个提交会包含两个分支的所有变更内容。\n例如：假设存在以下历史记录，并且当前分支是\"master\"：</p>\n<pre><code class=\"language-shell\">          A---B---C topic\n         /\n    D---E---F---G master\n</code></pre>\n<p>然后 <code>git merge topic</code>将会把ABC节点与G节点合并，并且将结果记录在新的提交H中。C节点和G节点都是H节点的父节点。</p>\n<pre><code class=\"language-shell\">          A---B---C topic\n         /         \\\n    D---E---F---G---H master\n</code></pre>\n<p><strong>子命令</strong></p>\n<ul>\n<li><code>--abort</code>：抛弃当前合并冲突的处理过程并尝试重建合并前的状态。</li>\n<li><code>--continue</code>：由于冲突停止后，您可以通过运行来结束合并</li>\n<li><code>--ff</code>：当合并策略为fast-forward时，只更新分支指针，而不创建合并提交。这是默认行为。</li>\n<li><code>--no-ff</code>：即使合并策略为fast-forward，也可以创建合并提交。这是合并tag时的默认行为。</li>\n<li><code>--squash</code>：将合并结果压缩为一个提交，并且不会保留源分支的提交历史。（与<code>--no-ff</code>冲突）</li>\n</ul>\n<p><strong>参数</strong></p>\n<ul>\n<li><code>-m &#x3C;message></code>：指定新的合并提交的提交信息。</li>\n</ul>\n<h4>git rebase</h4>\n<p>变基，改变基底\n例如：假设存在以下历史记录，并且当前分支是\"topic\"：</p>\n<pre><code class=\"language-text\">          C---D topic\n         /\n    A---B---M master\n</code></pre>\n<p>此时我们在topic分支上，执行rebase命令，相当于是想要把master分支合并到topic分支（这一步的场景就可以类比为我们在自己的分支 topic 上开发了一段时间了，准备从主干master上拉一下最新改动。模拟了<code>git pull --rebase</code>的情形）</p>\n<pre><code class=\"language-shell\"># 这两条命令等价于git rebase master topic\ngit checkout topic\ngit rebase master\n</code></pre>\n<p>此时历史记录变成:<strong>注意这里的接法，实际是会依次拿M和C、D内容分别比较，处理冲突后生成新的C’和D’，然后删除原本的CD提交</strong>，相当于topic分支的基底由原来的B变成了M（主分支最新的提交）</p>\n<pre><code class=\"language-text\">\t          C‘---D’ topic\n\t         /\n    A---B---M master\n</code></pre>\n<p>注意，如果master上在B以后没有新提交，那么就还是用原来的B作为基，rebase操作相当于无效，此时和git merge就基本没区别了，<strong>差异只在于git merge会多一条记录Merge操作的提交记录</strong></p>\n<blockquote>\n<p>上面的例子可抽象为如下实际工作场景：\n远程库上有一个master分支目前开发到B了，张三从B拉了代码到本地的 topic 分支进行开发，目前提交了两次，开发到D了；李四也从B拉到本地的master分支，他提交到了M，然后合到远程库的master上了。此时张三想从远程库master拉下最新代码，于是他在feature分支上执行了git pull origin master:topic --rebase（注意要加–rebase参数），即把远程库master分支给rebase下来，\n由于李四更早开发完，此时远程master上是李四的最新内容，rebase后再看张三的历史提交记录，就相当于是张三是基于李四的最新提交M进行的开发了。（但实际上张三更早拉代码下来，李四拉的晚但提交早）</p>\n</blockquote>\n<h2>回滚</h2>\n<h4>git reflog</h4>\n<p>查看命令历史，以便确定要回到未来的哪个版本</p>\n<h4>git reset</h4>\n<p>将当前 HEAD 重置为指定状态</p>\n<pre><code class=\"language-shell\">     git add . ------------> git commit -m 说明 -------------> git push\n   (添加到暂存区)              （提交到本地仓库）             （推送到远程仓库）\n</code></pre>\n<p><strong>子命令</strong></p>\n<ul>\n<li><code>--soft</code>:该命令表示撤销代码到暂存区之后，<code>commit</code>之前，代码在本地不会改变。</li>\n<li><code>--mixed</code>:该命令表示撤销代码到暂存区和<code>commit</code>之前，代码在本地不会改变。</li>\n<li><code>--hard</code>:该命令表示回退代码到某个版本下，代码在本地会改变到指定版本下，谨慎操作。</li>\n</ul>\n<h4>git revert</h4>\n<p>恢复一些现有的提交</p>\n<p><strong>子命令</strong></p>\n<ul>\n<li><code>--abort</code>： 取消操作并返回到预序列状态。</li>\n</ul>\n<p><strong>参数</strong></p>\n<ul>\n<li><code>-n</code>: --no-commit,该命令会自动创建一些提交日志消息，提交哪些提交已恢复。此标志应用必要的更改以将命名的提交恢复到您的工作树和索引，但不进行提交。</li>\n<li></li>\n</ul>\n<h4>reset vs revert</h4>\n<p>reset和revert都可以用来回滚代码。但他们是有区别的：</p>\n<ul>\n<li>reset是用来\"回退\"版本，删除原本的commit记录</li>\n<li>revert是用来\"还原\"某次或者某几次提交。生成新的一条commit记录</li>\n</ul>\n<p>例如，在master分支，有以下提交历史:</p>\n<pre><code class=\"language-text\">42eae13 (HEAD -> master) 第四次修改\n97ea0f9 第三次修改\ne50b7c2 第二次修改\n3a52650 第一次修改\n</code></pre>\n<p>执行 <code>git reset --hard 97ea0f9</code>,这个时候，git的提交历史变为:</p>\n<pre><code class=\"language-text\">97ea0f9 (HEAD -> master) 第三次修改\ne50b7c2 第二次修改\n3a52650 第一次修改\n</code></pre>\n<p>可以看到master当前指向97ea0f9这个版本，我们回到了第三次修改。\n但是如果执行 <code>git revert -n 97ea0f9</code>, 然后重新commit <code>git commit -m \"恢复第三次修改\"</code>,</p>\n<pre><code class=\"language-text\">33b8b30 (HEAD -> master) Revert \"恢复第三次修改\"\n42eae13 第四次修改\n97ea0f9 第三次修改\ne50b7c2 第二次修改\n3a52650 第一次修改\n</code></pre>\n<p>Git把第三次修改从提交中剔除(还原)了，还保留了第四次修改，并且产生了新的commit_id。</p>\n<h2>实际应用</h2>\n<p><a href=\"https://www.jianshu.com/p/b357df6794e3\">一个成功的Git分支模型</a></p>\n<h3>git如何把master合并到自己分支</h3>\n<ol>\n<li>切换到主分支 <code>git chekout master</code></li>\n<li>pull到本地 <code>git pull</code></li>\n<li>切换到自己的分支 <code>git checkout xxx</code></li>\n<li>把主分支merge到自己的分支 <code>git merge master</code></li>\n<li>最后push，自己分支就与主分支拉齐了</li>\n</ol>\n<h3>如何解决冲突</h3>\n<p>看到冲突后，你可以做两件事：</p>\n<ul>\n<li>决定不合并。<code>git merge --abort</code></li>\n<li>解决冲突。重新add/commit 或者<code>git merge --continue</code>密封交易。continue在调用之前检查是否存在正在进行的（中断的）合并<code>git commit</code>。然后在push</li>\n</ul>\n<h3>Git Clone 速度太慢的问题</h3>\n<ol>\n<li>https://whatismyipaddress.com/hostname-ip 到这个网站查找git IP</li>\n<li>或者<code>nslookup</code> 进行域名解析， git 相关地址的 <code>IP Address</code>，配置到 hosts 中</li>\n</ol>\n<pre><code class=\"language-shell\">nslookup github.com\nnslookup github.global.ssl.fastly.net\n</code></pre>\n<ol start=\"3\">\n<li><code>ping github.com</code>成功</li>\n<li>修改 hosts 文件 <code>sudo vim /etc/host</code> , 在hosts最后追加</li>\n</ol>\n<pre><code class=\"language-shell\">180.168.255.118 github.global.ssl.fastly.net\n180.168.255.118 github.com\n</code></pre>\n<h3>.gitignore 不生效</h3>\n<p>原因是 .gitignore 只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。<br>\n那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交。</p>\n<pre><code class=\"language-shell\">git rm -r --cached .\n\ngit add .\n\ngit commit -m 'update .gitignore'\n</code></pre>\n<h3>git Recv failure: Connection was reset</h3>\n<p>移除旧的origin ：<code>git remote remove origin</code><br>\n再重新建立新的origin ： <code>git remote add origin xxx</code>\n重新push就可以了</p>"
  },
  "_id": "post/2024-01-12-Git.md",
  "_raw": {
    "sourceFilePath": "post/2024-01-12-Git.md",
    "sourceFileName": "2024-01-12-Git.md",
    "sourceFileDir": "post",
    "contentType": "markdown",
    "flattenedPath": "post/2024-01-12-Git"
  },
  "type": "Post",
  "id": ""
}
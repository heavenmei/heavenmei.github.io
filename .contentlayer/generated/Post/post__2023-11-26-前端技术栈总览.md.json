{
  "title": "搭建React+TS项目的几种方式",
  "url": "/2023-11-26-react+ts",
  "description": null,
  "date": "2023-11-26T00:00:00.000Z",
  "body": {
    "raw": "\n## 打包工具\n### webpack\nhttps://webpack.js.org/\n\n### Vite\nhttps://cn.vitejs.dev/\n\n取代webpck的快速构建工具，优化构建时间。使用 esbuild\n```shell\n\nnpm create vite@latest\nyarn create vite\n```\n\n\n\n## 包管理器\nnpm, yarn, bnpm\n\n\n**cross-env**\n```json\n// package.json\n\"dev\": \"cross-env PORT=9000 nuxt dev \",\n\"mock\": \"cross-env PORT=9000 MODE=mock nuxt dev \",\n```\n\n## React手脚架\n### CRA/CRACO\n\n[cra](https://create-react-app.dev/)= Create React App。基于webpack和Babel， webpack配置太多。\n\n[craco](https://craco.js.org/docs/getting-started/)= Create React App Configuration Overide。基于cra之上的一个hacky层，用于定制它的配置,allows you to get all of the benefits of Create React App without ejecting\n\n1. `npx create-react-app my-app`\n2. `npm i -D @craco/craco` or `npm i -D @craco/types`(ts)\n3. create configuaration file `craco.config.js`\n4. update `package.json`\n    \n    ```json\n    \"scripts\": {\n    -  \"start\": \"react-scripts start\"\n    +  \"start\": \"craco start\"\n    -  \"build\": \"react-scripts build\"\n    +  \"build\": \"craco build\"\n    -  \"test\": \"react-scripts test\"\n    +  \"test\": \"craco test\"\n    }\n    ```\n    \n\n\n### Next.js\n\nNext.js 是一个基于 React 的[服务端渲染框架](https://cloud.tencent.com/product/ssr?from_column=20065&from=20065)，它提供了约定式路由、多种渲染方式、静态导出等功能。\n\n**渲染方式**\n\n- CSR - 客户端渲染。也就是我们常说的 SPA（single page application），使用 `useEffect` 获取接口数据。\n- SSR - 服务器端渲染\n- SSG - 静态站点生成。\n- ISR – 增量静态再生，可以再次从 API 获取数据，并且生成静态页面，最适合常见的资讯类、新闻类网站。\n- Server component- 也是 SSR 的一种， 但互补了 SSR 的不足，让网页拥有流式渲染的能力。/CRACO（Webpack）\n\n[cra](https://create-react-app.dev/)= Create React App。基于webpack和Babel， webpack配置太多。\n\n[craco](https://craco.js.org/docs/getting-started/)= Create React App Configuration Overide。基于cra之上的一个hacky层，用于定制它的配置,allows you to get all of the benefits of Create React App without ejecting\n\n1. `npx create-react-app my-app`\n    \n2. `npm i -D @craco/craco` or `npm i -D @craco/types`(ts)\n    \n3. create configuaration file `craco.config.js`\n    \n4. update `package.json`\n    \n    ```json\n    \"scripts\": {\n    -  \"start\": \"react-scripts start\"\n    +  \"start\": \"craco start\"\n    -  \"build\": \"react-scripts build\"\n    +  \"build\": \"craco build\"\n    -  \"test\": \"react-scripts test\"\n    +  \"test\": \"craco test\"\n    }\n    ```\n    \n\n\n## Vue手脚架\n### nuxtjs\nhttps://nuxt.com/\n\n## Eslint & ts\n### ts 别名设置\n`yarn add -D @type/node`\nvite.config.ts\n```ts\nexport default defineConfig({\n  ...,\n  resolve: {\n    alias: {\n      \"~\": path.resolve(__dirname, \"./\"),\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n});\n\n```\n\ntsconfig.json\n```json\n{\n  \"compilerOptions\": {\n    ...,\n    \"paths\": {\n      \"~/*\": [\"./*\"],\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n}\n\n```\n\n\n### 禁用any\n\n```js\n//  .eslintrc (tslintrc) file :\nrules: {\n    \"@typescript-eslint/no-explicit-any\": \"off\"\n  },\n```\n\n## 辅助\ntailwindcss： https://tailwindcss.com/\nanimate.css: https://animate.style/\nchroma: https://gka.github.io/chroma.js/ (color util)\n## UI\narco.design: https://arco.design/\n",
    "html": "<h2>打包工具</h2>\n<h3>webpack</h3>\n<p>https://webpack.js.org/</p>\n<h3>Vite</h3>\n<p>https://cn.vitejs.dev/</p>\n<p>取代webpck的快速构建工具，优化构建时间。使用 esbuild</p>\n<pre><code class=\"language-shell\">\nnpm create vite@latest\nyarn create vite\n</code></pre>\n<h2>包管理器</h2>\n<p>npm, yarn, bnpm</p>\n<p><strong>cross-env</strong></p>\n<pre><code class=\"language-json\">// package.json\n\"dev\": \"cross-env PORT=9000 nuxt dev \",\n\"mock\": \"cross-env PORT=9000 MODE=mock nuxt dev \",\n</code></pre>\n<h2>React手脚架</h2>\n<h3>CRA/CRACO</h3>\n<p><a href=\"https://create-react-app.dev/\">cra</a>= Create React App。基于webpack和Babel， webpack配置太多。</p>\n<p><a href=\"https://craco.js.org/docs/getting-started/\">craco</a>= Create React App Configuration Overide。基于cra之上的一个hacky层，用于定制它的配置,allows you to get all of the benefits of Create React App without ejecting</p>\n<ol>\n<li>\n<p><code>npx create-react-app my-app</code></p>\n</li>\n<li>\n<p><code>npm i -D @craco/craco</code> or <code>npm i -D @craco/types</code>(ts)</p>\n</li>\n<li>\n<p>create configuaration file <code>craco.config.js</code></p>\n</li>\n<li>\n<p>update <code>package.json</code></p>\n<pre><code class=\"language-json\">\"scripts\": {\n-  \"start\": \"react-scripts start\"\n+  \"start\": \"craco start\"\n-  \"build\": \"react-scripts build\"\n+  \"build\": \"craco build\"\n-  \"test\": \"react-scripts test\"\n+  \"test\": \"craco test\"\n}\n</code></pre>\n</li>\n</ol>\n<h3>Next.js</h3>\n<p>Next.js 是一个基于 React 的<a href=\"https://cloud.tencent.com/product/ssr?from_column=20065&#x26;from=20065\">服务端渲染框架</a>，它提供了约定式路由、多种渲染方式、静态导出等功能。</p>\n<p><strong>渲染方式</strong></p>\n<ul>\n<li>CSR - 客户端渲染。也就是我们常说的 SPA（single page application），使用 <code>useEffect</code> 获取接口数据。</li>\n<li>SSR - 服务器端渲染</li>\n<li>SSG - 静态站点生成。</li>\n<li>ISR – 增量静态再生，可以再次从 API 获取数据，并且生成静态页面，最适合常见的资讯类、新闻类网站。</li>\n<li>Server component- 也是 SSR 的一种， 但互补了 SSR 的不足，让网页拥有流式渲染的能力。/CRACO（Webpack）</li>\n</ul>\n<p><a href=\"https://create-react-app.dev/\">cra</a>= Create React App。基于webpack和Babel， webpack配置太多。</p>\n<p><a href=\"https://craco.js.org/docs/getting-started/\">craco</a>= Create React App Configuration Overide。基于cra之上的一个hacky层，用于定制它的配置,allows you to get all of the benefits of Create React App without ejecting</p>\n<ol>\n<li>\n<p><code>npx create-react-app my-app</code></p>\n</li>\n<li>\n<p><code>npm i -D @craco/craco</code> or <code>npm i -D @craco/types</code>(ts)</p>\n</li>\n<li>\n<p>create configuaration file <code>craco.config.js</code></p>\n</li>\n<li>\n<p>update <code>package.json</code></p>\n<pre><code class=\"language-json\">\"scripts\": {\n-  \"start\": \"react-scripts start\"\n+  \"start\": \"craco start\"\n-  \"build\": \"react-scripts build\"\n+  \"build\": \"craco build\"\n-  \"test\": \"react-scripts test\"\n+  \"test\": \"craco test\"\n}\n</code></pre>\n</li>\n</ol>\n<h2>Vue手脚架</h2>\n<h3>nuxtjs</h3>\n<p>https://nuxt.com/</p>\n<h2>Eslint &#x26; ts</h2>\n<h3>ts 别名设置</h3>\n<p><code>yarn add -D @type/node</code>\nvite.config.ts</p>\n<pre><code class=\"language-ts\">export default defineConfig({\n  ...,\n  resolve: {\n    alias: {\n      \"~\": path.resolve(__dirname, \"./\"),\n      \"@\": path.resolve(__dirname, \"./src\"),\n    },\n  },\n});\n\n</code></pre>\n<p>tsconfig.json</p>\n<pre><code class=\"language-json\">{\n  \"compilerOptions\": {\n    ...,\n    \"paths\": {\n      \"~/*\": [\"./*\"],\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n}\n\n</code></pre>\n<h3>禁用any</h3>\n<pre><code class=\"language-js\">//  .eslintrc (tslintrc) file :\nrules: {\n    \"@typescript-eslint/no-explicit-any\": \"off\"\n  },\n</code></pre>\n<h2>辅助</h2>\n<p>tailwindcss： https://tailwindcss.com/\nanimate.css: https://animate.style/\nchroma: https://gka.github.io/chroma.js/ (color util)</p>\n<h2>UI</h2>\n<p>arco.design: https://arco.design/</p>"
  },
  "_id": "post/2023-11-26-前端技术栈总览.md",
  "_raw": {
    "sourceFilePath": "post/2023-11-26-前端技术栈总览.md",
    "sourceFileName": "2023-11-26-前端技术栈总览.md",
    "sourceFileDir": "post",
    "contentType": "markdown",
    "flattenedPath": "post/2023-11-26-前端技术栈总览"
  },
  "type": "Post",
  "id": ""
}
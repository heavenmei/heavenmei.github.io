{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../src/lib/rehype-pre-raw.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport { writeFileSync } from \"fs\";\n\n// Remark packages\nimport remarkGfm from \"remark-gfm\";\nimport remarkCodeTitles from \"remark-flexible-code-titles\";\nimport { preProcess, postProcess } from \"./src/lib/rehype-pre-raw\";\n\n// Rehype packages\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nconst commonFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n};\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    tags: { type: \"list\", of: { type: \"string\" } },\n    author: { type: \"string\" },\n    subtitle: { type: \"string\" },\n    url: { type: \"string\", required: false },\n    titleAlt: { type: \"string\", required: false },\n    description: { type: \"string\", required: false },\n    descriptionAlt: { type: \"string\", required: false },\n    date: { type: \"date\", required: false },\n  },\n  computedFields: {\n    // id: {\n    //   type: \"string\",\n    //   resolve: (item) =>\n    //     item._raw.sourceFileName.split(\"_\").slice(1).join(\"_\").split(\".\")[0],\n    // },\n    ...commonFields,\n  },\n}));\n\n/**\n * Count the occurrences of all tags across blog posts and write to json file\n */\nfunction createTagCount(allBlogs) {\n  const tagCount = {};\n  // const slugger = new GithubSlugger()\n  allBlogs.forEach((file) => {\n    if (file.tags && (!isProduction || file.draft !== true)) {\n      file.tags.forEach((tag) => {\n        if (tag in tagCount) {\n          tagCount[tag] += 1;\n        } else {\n          tagCount[tag] = 1;\n        }\n      });\n    }\n  });\n  writeFileSync(\"public/tag-data.json\", JSON.stringify(tagCount));\n}\n\n// function createSearchIndex(allBlogs) {\n//   writeFileSync(\n//     `public/search.json`,\n//     JSON.stringify(allCoreContent(sortPosts(allBlogs)))\n//   );\n//   console.log(\"Local search index generated...\");\n// }\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  contentDirExclude: [\"ZtTemplates\", \".trash\", \".obsidian\"],\n  documentTypes: [Post],\n  mdx: {\n    remarkPlugins: [\n      remarkGfm,\n      [\n        remarkCodeTitles,\n        {\n          titleTagName: \"CodeBlockTitle\",\n          titleClassName: \"custom-code-title\",\n          titleProperties: (language, title) => ({\n            [\"data-language\"]: language,\n            title,\n          }),\n        },\n      ],\n    ],\n    // TODO: fix postProcess\n    rehypePlugins: [\n      // preProcess,\n      [\n        rehypePrettyCode,\n        {\n          theme: \"github-dark\",\n        },\n      ],\n      // postProcess,\n      rehypeSlug,\n      [\n        rehypeAutolinkHeadings,\n        {\n          // \u951A\u70B9\u8BBE\u7F6E\u7C7B\u540D\n          properties: {\n            class: \"header-anchor\",\n          },\n        },\n      ],\n    ],\n  },\n  onSuccess: async (importData) => {\n    const { allPosts } = await importData();\n    createTagCount(allPosts);\n    // createSearchIndex(allPosts);\n  },\n});\n", "import { visit } from 'unist-util-visit';\n\nexport const preProcess = () => (tree) => {\n  visit(tree, (node) => {\n    if (node?.type === 'element' && node?.tagName === 'pre') {\n      const [codeEl] = node.children;\n\n      if (codeEl.tagName !== 'code') return;\n      node.properties.raw = codeEl.children?.[0].value;\n      // console.log('\uD83D\uDEA8 preProcess ~', node);\n    }\n  });\n};\n\nexport const postProcess = () => (tree) => {\n  visit(tree, 'element', (node) => {\n    if (node?.type === 'element' && node?.tagName === 'pre') {\n      node.properties['raw'] = node.raw;\n      // console.log('\uD83D\uDEA8 postProcess ~', node);\n    }\n  });\n};\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,SAAS,qBAAqB;AAG9B,OAAO,eAAe;AACtB,OAAO,sBAAsB;;;ACL7B,SAAS,aAAa;;;ADStB,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AAEnC,IAAM,eAAe,QAAQ,IAAI,aAAa;AAE9C,IAAM,eAAe;AAAA,EACnB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AACF;AAEO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAC7C,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,UAAU,EAAE,MAAM,SAAS;AAAA,IAC3B,KAAK,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IACvC,UAAU,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC5C,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC/C,gBAAgB,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAClD,MAAM,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,EACxC;AAAA,EACA,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMd,GAAG;AAAA,EACL;AACF,EAAE;AAKF,SAAS,eAAe,UAAU;AAChC,QAAM,WAAW,CAAC;AAElB,WAAS,QAAQ,CAAC,SAAS;AACzB,QAAI,KAAK,SAAS,CAAC,gBAAgB,KAAK,UAAU,OAAO;AACvD,WAAK,KAAK,QAAQ,CAAC,QAAQ;AACzB,YAAI,OAAO,UAAU;AACnB,mBAAS,GAAG,KAAK;AAAA,QACnB,OAAO;AACL,mBAAS,GAAG,IAAI;AAAA,QAClB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACD,gBAAc,wBAAwB,KAAK,UAAU,QAAQ,CAAC;AAChE;AAUA,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,mBAAmB,CAAC,eAAe,UAAU,WAAW;AAAA,EACxD,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,cAAc;AAAA,UACd,gBAAgB;AAAA,UAChB,iBAAiB,CAAC,UAAU,WAAW;AAAA,YACrC,CAAC,eAAe,GAAG;AAAA,YACnB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AAAA,IAEA,eAAe;AAAA;AAAA,MAEb;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,QACT;AAAA,MACF;AAAA;AAAA,MAEA;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA;AAAA,UAEE,YAAY;AAAA,YACV,OAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW,OAAO,eAAe;AAC/B,UAAM,EAAE,SAAS,IAAI,MAAM,WAAW;AACtC,mBAAe,QAAQ;AAAA,EAEzB;AACF,CAAC;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../lib/copy-code.js", "../../../lib/static-images.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport { writeFileSync } from \"fs\";\nimport path from \"node:path\";\n\n// Remark packages\nimport remarkGfm from \"remark-gfm\";\nimport remarkCodeTitles from \"remark-flexible-code-titles\";\nimport { preProcess, postProcess } from \"./lib/copy-code\";\n\n// Rehype packages\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport mdxImages from \"./lib/static-images\";\n\nconst isProduction = process.env.NODE_ENV === \"production\";\n\nconst commonFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n};\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    tags: { type: \"list\", of: { type: \"string\" } },\n    author: { type: \"string\" },\n    subtitle: { type: \"string\" },\n    url: { type: \"string\", required: false },\n    description: { type: \"string\", required: false },\n    date: { type: \"date\", required: false },\n  },\n  computedFields: {\n    // id: {\n    //   type: \"string\",\n    //   resolve: (item) =>\n    //     item._raw.sourceFileName.split(\"_\").slice(1).join(\"_\").split(\".\")[0],\n    // },\n    ...commonFields,\n  },\n}));\n\n/**\n * Count the occurrences of all tags across blog posts and write to json file\n */\nfunction createTagCount(allBlogs) {\n  const tagCount = {};\n  // const slugger = new GithubSlugger()\n  allBlogs.forEach((file) => {\n    if (file.tags && (!isProduction || file.draft !== true)) {\n      file.tags.forEach((tag) => {\n        if (tag in tagCount) {\n          tagCount[tag] += 1;\n        } else {\n          tagCount[tag] = 1;\n        }\n      });\n    }\n  });\n  writeFileSync(\"public/tag-data.json\", JSON.stringify(tagCount));\n}\n\n// function createSearchIndex(allBlogs) {\n//   writeFileSync(\n//     `public/search.json`,\n//     JSON.stringify(allCoreContent(sortPosts(allBlogs)))\n//   );\n//   console.log(\"Local search index generated...\");\n// }\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  contentDirExclude: [\"ZtTemplates\", \".trash\", \".obsidian\"],\n  documentTypes: [Post],\n  mdx: {\n    remarkPlugins: [\n      remarkGfm,\n      [\n        remarkCodeTitles,\n        {\n          titleTagName: \"CodeBlockTitle\",\n          titleClassName: \"custom-code-title\",\n          titleProperties: (language, title) => ({\n            [\"data-language\"]: language,\n            title,\n          }),\n        },\n      ],\n    ],\n    // TODO: fix postProcess\n    rehypePlugins: [\n      [\n        mdxImages,\n        {\n          publicDir: path.join(process.cwd(), \"public\"),\n          sourceRoot: path.join(process.cwd(), \"content\"),\n          resourcePath: \"\",\n        },\n      ],\n      rehypeSlug,\n      [\n        rehypeAutolinkHeadings,\n        {\n          // \u951A\u70B9\u8BBE\u7F6E\u7C7B\u540D\n          properties: {\n            class: \"header-anchor\",\n          },\n        },\n      ],\n\n      // \u83B7\u53D6\u4EE3\u7801\u5757\u5185\u5BB9\n      preProcess,\n      [\n        rehypePrettyCode,\n        {\n          theme: \"github-dark\",\n        },\n      ],\n      // \u4EE3\u7801\u5757\u5185\u5BB9\u653E\u8FDBpre.raw\n      postProcess,\n    ],\n  },\n  onSuccess: async (importData) => {\n    const { allPosts } = await importData();\n    createTagCount(allPosts);\n    // createSearchIndex(allPosts);\n  },\n});\n", "import { visit } from \"unist-util-visit\";\n\n// \u83B7\u53D6\u4EE3\u7801\u5757\u5185\u5BB9\nexport const preProcess = () => (tree) => {\n  visit(tree, (node) => {\n    if (node?.type === \"element\" && node?.tagName === \"pre\") {\n      const [codeEl] = node.children;\n\n      if (codeEl.tagName !== \"code\") return;\n      node.properties.raw = codeEl.children?.[0].value;\n      // console.log(\"\uD83D\uDEA8 preProcess ~\", node);\n    }\n  });\n};\n\n// \u4EE3\u7801\u5757\u5185\u5BB9\u653E\u8FDBpre.raw\nexport const postProcess = () => (tree) => {\n  visit(tree, \"element\", (node) => {\n    if (node?.type === \"element\" && node?.tagName === \"figure\") {\n      if (!(\"data-rehype-pretty-code-figure\" in node.properties)) {\n        return;\n      }\n\n      for (const child of node.children) {\n        if (child.tagName === \"pre\") {\n          child.properties[\"raw\"] = node.properties.raw;\n          node.properties.raw = undefined;\n          // console.log(\"\uD83D\uDEA8 postProcess ~\", child, node.properties.raw);\n        }\n      }\n    }\n  });\n};\n", "import fs from \"fs/promises\";\nimport { Element, Root } from \"hast\";\nimport crypto from \"node:crypto\";\nimport path from \"node:path\";\nimport sharp from \"sharp\";\nimport { Plugin } from \"unified\";\nimport { visit } from \"unist-util-visit\";\n\ntype Options = {\n  sourceRoot: string;\n  publicDir: string;\n  resourcePath: string;\n};\n\nconst checksum = (content: Buffer) => {\n  return crypto.createHash(\"sha256\").update(content).digest(\"hex\");\n};\n\nconst fileChecksum = async (file: string) => {\n  try {\n    return checksum(await fs.readFile(file));\n  } catch (_) {\n    return \"\";\n  }\n};\n\nconst copy = async (source: string, sha256sum: string, target: string) => {\n  if (sha256sum !== (await fileChecksum(target))) {\n    const targetDir = path.dirname(target);\n\n    await fs.mkdir(targetDir, { recursive: true });\n    await fs.copyFile(source, target);\n  }\n};\n\n// \u521B\u5EFA\u5360\u4F4D\u7B26\nconst createPlaceholder = async (image: sharp.Sharp) => {\n  const { width, height } = await image.metadata();\n  if (!width || !height) {\n    throw new Error(\"fetched image without width and height\");\n  }\n\n  const imgAspectRatio = width / height;\n\n  const placeholderImgWidth = 8;\n  const placeholderImgHeight = Math.round(placeholderImgWidth / imgAspectRatio);\n\n  return image\n    .resize(placeholderImgWidth, placeholderImgHeight)\n    .png({\n      quality: 75,\n    })\n    .toBuffer()\n    .then((buffer) => `data:image/png;base64,${buffer.toString(\"base64\")}`);\n};\n\nconst metadata = async (\n  resourcePath: string,\n  source: string,\n  pathname: string\n) => {\n  const content = await fs.readFile(source);\n  const image = await sharp(content);\n\n  const { width, height } = await image.metadata();\n\n  if (!width || !height) {\n    return null;\n  }\n\n  const src = resourcePath + \"/\" + pathname;\n\n  const sha256 = checksum(content);\n\n  const blurDataURL = await createPlaceholder(image);\n  return {\n    sha256,\n    props: {\n      width,\n      height,\n      src,\n      blurDataURL,\n    },\n  };\n};\n\nconst processImage = async (\n  options: Options,\n  file: any,\n  node: Element\n): Promise<void> => {\n  const root = options.sourceRoot;\n  const pathname = path.join(\n    file.data.rawDocumentData.sourceFileDir,\n    (node.properties?.src as string) || \"\"\n  );\n  const source = path.join(root, pathname);\n\n  const meta = await metadata(options.resourcePath, source, pathname);\n  if (!meta) {\n    return;\n  }\n\n  const target = path.join(options.publicDir, pathname);\n  await copy(source, meta.sha256, target);\n\n  if (!node.properties) {\n    node.properties = {};\n  }\n  node.properties = {\n    ...node.properties,\n    ...meta.props,\n  };\n};\n\nexport const staticCoverImage = async (\n  sourceRoot: string,\n  targetRoot: string,\n  resourcePath: string,\n  directory: string,\n  image: string\n) => {\n  if (image.includes(\"://\")) {\n    return image;\n  }\n\n  const source = path.join(sourceRoot, directory, image);\n  const content = await fs.readFile(source);\n  const sha256sum = checksum(content);\n  const target = path.join(targetRoot, directory, image);\n\n  await copy(source, sha256sum, target);\n\n  return `${resourcePath}/${directory}/${image}`;\n};\n\nconst staticImages: Plugin<[Options], Root> =\n  // @ts-ignore\n  (options) => (tree, file, done) => {\n    const tasks: Promise<void>[] = [];\n\n    visit(tree, \"element\", (node) => {\n      if (node.tagName === \"img\" && !node.properties.src.includes(\"://\")) {\n        tasks.push(processImage(options, file, node));\n      }\n    });\n\n    Promise.all(tasks).then(() => done());\n  };\n\nexport default staticImages;\n"],
  "mappings": "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",
  "names": ["path", "visit", "visit", "path"]
}

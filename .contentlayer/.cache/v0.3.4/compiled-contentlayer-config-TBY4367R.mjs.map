{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../src/lib/rehype-pre-raw.js"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport remarkCodeTitles from \"remark-flexible-code-titles\";\nimport { preProcess, postProcess } from \"./src/lib/rehype-pre-raw\";\nimport rehypeSlug from \"rehype-slug\";\n// import rehypeAutolinkHeadings from \"rehype-autolink-heading\";\n\nconst commonFields = {\n  slug: {\n    type: \"string\",\n    resolve: (doc) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n};\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    tags: { type: \"array\", required: false },\n    author: { type: \"string\" },\n    subtitle: { type: \"string\" },\n    url: { type: \"string\", required: false },\n    titleAlt: { type: \"string\", required: false },\n    description: { type: \"string\", required: false },\n    descriptionAlt: { type: \"string\", required: false },\n    date: { type: \"date\", required: false },\n  },\n  computedFields: {\n    // id: {\n    //   type: \"string\",\n    //   resolve: (item) =>\n    //     item._raw.sourceFileName.split(\"_\").slice(1).join(\"_\").split(\".\")[0],\n    // },\n    // headings: {\n    //   type: \"json\",\n    //   resolve: async (doc) => {\n    //     const slugger = new GithubSlugger();\n\n    //     // https://stackoverflow.com/a/70802303\n    //     const regex = /\\n\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n\n    //     const headings = Array.from(doc.body.raw.matchAll(regex)).map(\n    //       // @ts-ignore\n    //       ({ groups }) => {\n    //         const flag = groups?.flag;\n    //         const content = groups?.content;\n    //         return {\n    //           heading: flag?.length,\n    //           text: content,\n    //           slug: content ? slugger.slug(content) : undefined,\n    //         };\n    //       }\n    //     );\n    //     console.log(\"headings===\", headings);\n\n    //     return headings;\n    //   },\n    // },\n    ...commonFields,\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"content\",\n  contentDirExclude: [\"ZtTemplates\", \".trash\", \".obsidian\"],\n  documentTypes: [Post],\n  mdx: {\n    remarkPlugins: [\n      remarkGfm,\n      // [\n      //   remarkCodeTitles,\n      //   {\n      //     titleTagName: \"CodeBlockTitle\",\n      //     titleClassName: \"custom-code-title\",\n      //     titleProperties: (language, title) => ({\n      //       [\"data-language\"]: language,\n      //       title,\n      //     }),\n      //   },\n      // ],\n    ],\n    // TODO: fix postProcess\n    rehypePlugins: [\n      // preProcess,\n      // [\n      //   rehypePrettyCode,\n      //   {\n      //     theme: \"github-dark\",\n      //   },\n      // ],\n      // postProcess,\n      rehypeSlug,\n      // [\n      //   rehypeAutolinkHeadings,\n      //   {\n      //     // \u951A\u70B9\u8BBE\u7F6E\u7C7B\u540D\n      //     properties: {\n      //       class: \"header-anchor\",\n      //     },\n      //     // \u951A\u70B9\u7684\u5185\u5BB9\n      //     content: {\n      //       type: \"text\",\n      //       value: \"#\",\n      //     },\n      //   },\n      // ],\n    ],\n  },\n});\n", "import { visit } from 'unist-util-visit';\n\nexport const preProcess = () => (tree) => {\n  visit(tree, (node) => {\n    if (node?.type === 'element' && node?.tagName === 'pre') {\n      const [codeEl] = node.children;\n\n      if (codeEl.tagName !== 'code') return;\n      node.properties.raw = codeEl.children?.[0].value;\n      // console.log('\uD83D\uDEA8 preProcess ~', node);\n    }\n  });\n};\n\nexport const postProcess = () => (tree) => {\n  visit(tree, 'element', (node) => {\n    if (node?.type === 'element' && node?.tagName === 'pre') {\n      node.properties['raw'] = node.raw;\n      // console.log('\uD83D\uDEA8 postProcess ~', node);\n    }\n  });\n};\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,eAAe;AACtB,OAAO,sBAAsB;AAC7B,OAAO,sBAAsB;;;ACH7B,SAAS,aAAa;;;ADKtB,OAAO,gBAAgB;AAGvB,IAAM,eAAe;AAAA,EACnB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,IAAI,KAAK,aAAa;AAAA,EAC9C;AAAA,EACA,cAAc;AAAA,IACZ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,MAAM,GAAG,EAAE,MAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACvE;AACF;AAEO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,SAAS,UAAU,MAAM;AAAA,IACvC,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,UAAU,EAAE,MAAM,SAAS;AAAA,IAC3B,KAAK,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IACvC,UAAU,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC5C,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC/C,gBAAgB,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAClD,MAAM,EAAE,MAAM,QAAQ,UAAU,MAAM;AAAA,EACxC;AAAA,EACA,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA+Bd,GAAG;AAAA,EACL;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,mBAAmB,CAAC,eAAe,UAAU,WAAW;AAAA,EACxD,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe;AAAA,MACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYF;AAAA;AAAA,IAEA,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAeF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
